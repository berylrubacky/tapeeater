package com.bsrubacky.tapeeater.api.lastFMimport android.content.Contextimport androidx.datastore.preferences.preferencesDataStoreimport com.bsrubacky.tapeeater.BuildConfigimport com.bsrubacky.tapeeater.api.OrchestratorResponseimport com.tickaroo.tikxml.retrofit.TikXmlConverterFactoryimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.withContextimport okhttp3.OkHttpClientimport okio.IOExceptionimport retrofit2.Retrofitimport java.util.concurrent.TimeUnitprivate val Context.dataStore by preferencesDataStore(    name = "settings")object LastFMDataOrchestrator {    fun sign(parameters: String){        val sharedSecret = BuildConfig.lastFM_sharedSecret    }    const val VERSION = BuildConfig.VERSION_NAME    val userAgent = "TapeEater/"+VERSION+System.getProperty("http.agent")    private val okHttpClient = OkHttpClient.Builder()        .readTimeout(60, TimeUnit.SECONDS)        .connectTimeout(60, TimeUnit.SECONDS)        .addInterceptor { chain ->            val request = chain.request()            chain.proceed(                request.newBuilder()                    .header("User-Agent", userAgent)                    .build()            )        }        .build()    private val retrofit = Retrofit.Builder()        .client(okHttpClient)        .baseUrl("http://ws.audioscrobbler.com/2.0")        .addConverterFactory(TikXmlConverterFactory.create())        .build()    suspend fun requestData(        vararg requests: LastFMRequest<*>    ): OrchestratorResponse<Int> =        withContext(Dispatchers.IO) {            try {                val api = retrofit.create(LastFM::class.java)                requests.forEach {                    it.setupRequest(                        api                    )                    it.run()                }            } catch (e: IOException) {                e.printStackTrace()                return@withContext OrchestratorResponse.Error(e)            }            return@withContext OrchestratorResponse.Success(200)        }}